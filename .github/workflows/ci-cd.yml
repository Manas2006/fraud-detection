name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test-backend:
    name: Test Spring Boot Backend
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: fraudshield_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle
    
    - name: Grant execute permission for gradlew
      run: chmod +x springboot-backend/gradlew
    
    - name: Test with Gradle
      working-directory: springboot-backend
      run: ./gradlew test
    
    - name: Build with Gradle
      working-directory: springboot-backend
      run: ./gradlew build -x test
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-test-results
        path: springboot-backend/build/reports/tests/
        retention-days: 30

  test-ml-service:
    name: Test ML Service
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      working-directory: ml-service
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx
    
    - name: Run tests
      working-directory: ml-service
      run: |
        python -m pytest tests/ -v --tb=short

  test-frontend:
    name: Test React Frontend
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: web-dashboard/package-lock.json
    
    - name: Install dependencies
      working-directory: web-dashboard
      run: npm ci
    
    - name: Run tests
      working-directory: web-dashboard
      run: npm test -- --coverage --watchAll=false
    
    - name: Build
      working-directory: web-dashboard
      run: npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: web-dashboard/dist/
        retention-days: 30

  build-and-push-images:
    name: Build and Push Docker Images
    needs: [test-backend, test-ml-service, test-frontend]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha
    
    - name: Build and push Backend image
      uses: docker/build-push-action@v5
      with:
        context: ./springboot-backend
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Extract metadata for ML service
      id: meta-ml
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/ml-service
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha
    
    - name: Build and push ML service image
      uses: docker/build-push-action@v5
      with:
        context: ./ml-service
        push: true
        tags: ${{ steps.meta-ml.outputs.tags }}
        labels: ${{ steps.meta-ml.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    name: Deploy to AWS
    needs: build-and-push-images
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.5.0"
    
    - name: Terraform Init
      working-directory: infra
      run: terraform init
    
    - name: Terraform Plan
      working-directory: infra
      run: terraform plan -var="backend_image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:sha-${{ github.sha }}" -var="ml_image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/ml-service:sha-${{ github.sha }}" -var="db_password=${{ secrets.DB_PASSWORD }}"
    
    - name: Terraform Apply
      working-directory: infra
      run: terraform apply -auto-approve -var="backend_image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:sha-${{ github.sha }}" -var="ml_image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/ml-service:sha-${{ github.sha }}" -var="db_password=${{ secrets.DB_PASSWORD }}"
    
    - name: Get deployment outputs
      working-directory: infra
      run: |
        echo "API_URL=$(terraform output -raw api_base_url)" >> $GITHUB_ENV
        echo "WEB_URL=$(terraform output -raw web_url)" >> $GITHUB_ENV
    
    - name: Comment deployment info
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `ðŸš€ Deployment completed!
          
          **API URL:** ${process.env.API_URL}
          **Web Dashboard:** ${process.env.WEB_URL}
          
          Commit: ${context.sha}`
          }) 